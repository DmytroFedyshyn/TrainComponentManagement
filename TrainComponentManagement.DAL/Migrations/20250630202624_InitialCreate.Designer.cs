// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainComponentManagement.DAL.Data;

#nullable disable

namespace TrainComponentManagement.DAL.Migrations
{
    [DbContext(typeof(TrainComponentContext))]
    [Migration("20250630202624_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrainComponentManagement.DAL.Models.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanAssignQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UniqueNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("UniqueNumber")
                        .IsUnique();

                    b.HasIndex("CanAssignQuantity", "Quantity");

                    b.ToTable("Components", t =>
                        {
                            t.HasCheckConstraint("CK_Component_Quantity_NonNegative", "Quantity IS NULL OR Quantity >= 0");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
